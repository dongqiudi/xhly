import Head from "next/head";
import React, { useState } from 'react';
import crypto from 'crypto';
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { Textarea, MessagePlugin, NotificationPlugin, Form, Input, Button, Select } from 'tdesign-react/lib/';
import { MinusCircleIcon } from 'tdesign-icons-react';

const inter = Inter({ subsets: ["latin"] });
const { FormItem, FormList } = Form;

const ccys = [
  { label: "USDT", value: "USDT" },
  { label: "ETH", value: "ETH" },
  { label: "BTC", value: "BTC" },
  { label: "MATIC", value: "MATIC" },
  { label: "SOL", value: "SOL" }
];

const chains = [
  { label: "USDT-Optimism", value: "USDT-Optimism", fee: "0.15" },
  { label: "BTC-Bitcoin", value: "BTC-Bitcoin", fee: "0.005" },
  { label: "SOL-Solana", value: "SOL-Solana", fee: "0.016" },
  { label: "ETH-Arbitrum One", value: "ETH-Arbitrum One", fee: "0.0001" },
  { label: "ETH-Optimism", value: "ETH-Optimism", fee: "0.00004" },
  { label: "ETH-zkSync Era", value: "ETH-zkSync Era", fee: "0.000041" },
  { label: "ETH-Linea", value: "ETH-Linea", fee: "0.0002" },
  { label: "MATIC-Polygon", value: "MATIC-Polygon", fee: "0.1" }
];

const apiOptions = [{
  label: "欧易",
  value: "okx",
  path: "/api/v5/asset/withdrawal",
  url: "https://www.okx.com",
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    "OK-ACCESS-KEY": "{APIKey}",
    "OK-ACCESS-TIMESTAMP": "{Timestamp}",
    "OK-ACCESS-PASSPHRASE": "{Passphrase}"
  },
  data: {
    "amt": "{total}",
    "fee": "{fee}",
    "dest": "4",
    "ccy": "{ccy}",
    "chain": "{chain}",
    "toAddr": "{address}"
  }
}];

const wallet = (url, method, headers, data) => {
  return fetch(url, { method: method, body: data, headers: headers })
    .then(response => response.json())
    .catch(error => {
      throw new Error('Error:', error);
    });
}

const generateSignature = (timestamp, method, path, data, SecretKey) => {
  const payload = timestamp + method + path + JSON.stringify(data);
  const signature = crypto.createHmac('sha256', SecretKey).update(payload).digest('base64');
  return signature;
}

export default function Home() {
  const [form] = Form.useForm();
  const [dynamicChains, setDynamicChains] = useState([]);

  const handleCcyChange = (value) => {
    const filteredChains = chains.filter(chain => chain.value.startsWith(value));
    setDynamicChains(filteredChains);
  }

  function onSubmit(e) {
    const allFields = form.getFieldsValue(true);
    if (e.validateResult === true) {
      allFields.task.forEach((task, index) => {
        const { api, ccy, chain, total, address, APIKey, SecretKey, Passphrase } = task;
        const apiConfig = apiOptions.find(item => item.value === api);
        const theCcy = ccys.find(item => item.value === ccy).label;
        const theChain = dynamicChains.find(item => item.value === chain).label;
        const fee = dynamicChains.find(item => item.value === chain).fee;

        if (!apiConfig || total <= 0) {
          MessagePlugin.warning(`任务${index + 1}：禁止反向提币`);
          return;
        }

        address.split('\n').forEach(addr => {
          const { url, path, method } = apiConfig;
          let headers = JSON.parse(JSON.stringify(apiConfig.headers));
          let data = JSON.parse(JSON.stringify(apiConfig.data));

          Object.keys(data).forEach(key => {
            data[key] = data[key].replace("{total}", total)
              .replace("{fee}", fee)
              .replace("{ccy}", ccy)
              .replace("{chain}", chain)
              .replace("{address}", addr);
          });

          const timestamp = new Date().toISOString();
          const SIGN = generateSignature(timestamp, method, path, data, SecretKey);

          Object.keys(headers).forEach(key => {
            headers[key] = headers[key].replace("{APIKey}", APIKey)
              .replace("{Timestamp}", timestamp)
              .replace("{Passphrase}", Passphrase)
              .replace("{SecretKey}", SIGN);
          });

          wallet(url + path, method, headers, JSON.stringify(data))
            .then(res => {
              if (res.code === '0') {
                NotificationPlugin.success({
                  title: "成功",
                  content: addr
                });
              } else {
                NotificationPlugin.error({
                  placement: 'top-left',
                  title: "提币失败",
                  content: `${addr}：${res.msg}`
                });
              }
            })
            .catch(error => {
              NotificationPlugin.error({
                placement: 'top-left',
                title: "提币失败",
                content: `${addr}：${error.message}`
              });
            });
        });
      });
    }
  }

  return (
    <>
      <Head>
        <title>批量提币系统</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.center} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', minHeight: '100vh' }}>
          <h1 style={{ fontSize: '3em', backgroundImage: 'linear-gradient(45deg, red, blue)', WebkitBackgroundClip: 'text', WebkitTextFillColor: 'transparent', marginBottom: '50px' }}>星火提币系统</h1>
          <Form form={form} onSubmit={onSubmit}>
            <FormList name="task">
              {(fields, { add, remove }) => (
                <>
                  {fields.map(({ key, name, ...restField }) => (
                    <>
                      <FormItem key={key}>
                        <FormItem
                          {...restField}
                          name={[name, 'api']}
                          label="接口"
                          rules={[{ required: true, type: 'error' }]}
                        >
                          <Select options={apiOptions}></Select>
                        </FormItem>
                        <FormItem
                          {...restField}
                          name={[name, 'ccy']}
                          label="币种"
                          rules={[{ required: true, type: 'error' }]}
                        >
                          <Select options={ccys} onChange={value => handleCcyChange(value)}></Select>
                        </FormItem>
                        <FormItem
                          {...restField}
                          name={[name, 'chain']}
                          label="链"
                          rules={[{ required: true, type: 'error' }]}
                        >
                          <Select options={dynamicChains}></Select>
                        </FormItem>
                        <FormItem {...restField} name={[name, 'total']} label="数量" rules={[{ required: true, type: 'error' }]}>
                          <Input />
                        </FormItem>
                        <FormItem>
                          <MinusCircleIcon size="20px" style={{ cursor: 'pointer' }} onClick={() => remove(name)} />
                        </FormItem>
                      </FormItem>
                      <FormItem {...restField} name={[name, 'APIKey']} label="APIKey" rules={[{ required: true, type: 'error' }]}>
                        <Input />
                      </FormItem>
                      <FormItem {...restField} name={[name, 'SecretKey']} label="SecretKey" rules={[{ required: true, type: 'error' }]}>
                        <Input />
                      </FormItem>
                      <FormItem {...restField} name={[name, 'Passphrase']} label="Passphrase" rules={[{ required: true, type: 'error' }]}>
                        <Input />
                      </FormItem>
                      <FormItem {...restField} name={[name, 'address']} label="地址" rules={[{ required: true, type: 'error' }]}>
                        <Textarea />
                      </FormItem>
                    </>
                  ))}
                  <FormItem style={{ marginLeft: 100 }}>
                    <Button theme="default" variant="dashed" onClick={() => add({ api: 'okx', ccy: "", chain: "", APIKey: "", SecretKey: "", Passphrase: "", total: 0, address: "" })}>
                      添加任务
                    </Button>
                  </FormItem>
                </>
              )}
            </FormList>
            <FormItem style={{ marginLeft: 100 }}>
              <Button type="submit" theme="primary">
                提交操作
              </Button>
              <Button type="reset" style={{ marginLeft: 12 }}>
                重置
              </Button>
            </FormItem>
          </Form>
        </div>
      </main>
    </>
  );
}
